// <auto-generated />
using System;
using JaiVendas.CrossCutting.Infra.Data.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace JaiVendas.CrossCutting.Infra.Data.Migrations
{
    [DbContext(typeof(JaiVendasDataContext))]
    partial class JaiVendasDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("JaiVendas.Domain.Model.Customers.Customer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerId");

                    b.Property<bool>("Active")
                        .HasColumnType("bit");

                    b.Property<string>("CPF")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("JaiVendas.Domain.Model.Customers.CustomerAddress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerAddressId");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Neighborhood")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("nvarchar(300)");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("RegionId");

                    b.ToTable("CustomerAddresses");
                });

            modelBuilder.Entity("JaiVendas.Domain.Model.Customers.CustomerPhone", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CustomerPhoneId");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerPhones");
                });

            modelBuilder.Entity("JaiVendas.Domain.Model.Internationalization.Country", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CountryId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0cf96f71-605e-4cca-b2b7-df4ed8bc35f9"),
                            Name = "Brazil"
                        },
                        new
                        {
                            Id = new Guid("bea6856e-f59a-4505-9f8b-dc96b374a2c5"),
                            Name = "Germany"
                        });
                });

            modelBuilder.Entity("JaiVendas.Domain.Model.Internationalization.CountryRegion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("CountryRegionId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("CountryRegions");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9a227e78-f037-4593-a103-e3626316666f"),
                            Code = "SP",
                            CountryId = new Guid("0cf96f71-605e-4cca-b2b7-df4ed8bc35f9"),
                            Description = "São Paulo"
                        },
                        new
                        {
                            Id = new Guid("e9970d15-d7c3-47b4-80b1-3b1d148032f7"),
                            Code = "MG",
                            CountryId = new Guid("0cf96f71-605e-4cca-b2b7-df4ed8bc35f9"),
                            Description = "Minas Gerais"
                        });
                });

            modelBuilder.Entity("JaiVendas.Domain.Model.Customers.CustomerAddress", b =>
                {
                    b.HasOne("JaiVendas.Domain.Model.Internationalization.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .IsRequired();

                    b.HasOne("JaiVendas.Domain.Model.Customers.Customer", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .IsRequired();

                    b.HasOne("JaiVendas.Domain.Model.Internationalization.CountryRegion", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("JaiVendas.Domain.Model.Customers.CustomerPhone", b =>
                {
                    b.HasOne("JaiVendas.Domain.Model.Customers.Customer", null)
                        .WithMany("Phones")
                        .HasForeignKey("CustomerId")
                        .IsRequired();
                });

            modelBuilder.Entity("JaiVendas.Domain.Model.Customers.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Phones");
                });
#pragma warning restore 612, 618
        }
    }
}
